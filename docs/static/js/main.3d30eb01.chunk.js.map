{"version":3,"sources":["logo.svg","screens/dialog.js","screens/Search.js","App.js","reportWebVitals.js","index.js"],"names":["ScrollDialog","props","React","useState","scroll","descriptionElementRef","useRef","useEffect","open","descriptionElement","current","focus","Dialog","onClose","handleClose","aria-labelledby","aria-describedby","DialogTitle","id","title","DialogContent","dividers","DialogContentText","ref","tabIndex","text","DialogActions","Button","onClick","color","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","palette","secondary","Search","classes","searchText","setSearchText","feedbackToken","setFeedbackToken","apiToken","setApiToken","serverName","setServerName","trainingResults","setTrainingResults","setTaskResults","howToResults","setHowToResults","dialogText","setDialogText","dialogOpen","setDialogOpen","dialogTitle","setDialogTitle","saveThumb","feedback","search","link","fetch","method","body","JSON","stringify","headers","then","response","json","data","error","console","ThumbUp","IconButton","url","ThumbDown","className","Grid","container","item","xs","TextField","label","onChange","e","target","value","onSubmit","trim","preventDefault","Accept","results","training","tasks","howtos","catch","log","fullWidth","InputProps","startAdornment","InputAdornment","position","type","List","subheader","ListSubheader","component","map","ListItem","ListItemAvatar","ListItemText","primary","href","style","cursor","App","basename","process","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d30eb01.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport ReactMarkdown from 'react-markdown'\n\nexport default function ScrollDialog(props) {\n  const [scroll, setScroll] = React.useState('paper');\n\n  const handleClickOpen = (scrollType) => () => {\n    setScroll(scrollType);\n  };\n\n  const descriptionElementRef = React.useRef(null);\n  React.useEffect(() => {\n    if (props.open) {\n      const { current: descriptionElement } = descriptionElementRef;\n      if (descriptionElement !== null) {\n        descriptionElement.focus();\n      }\n    }\n  }, []);\n\n  return (\n    <div>\n      <Dialog\n        open={props.open}\n        onClose={props.handleClose}\n        scroll={scroll}\n        aria-labelledby=\"scroll-dialog-title\"\n        aria-describedby=\"scroll-dialog-description\"\n      >\n        <DialogTitle id=\"scroll-dialog-title\">{props.title}</DialogTitle>\n        <DialogContent dividers={scroll === 'paper'}>\n          <DialogContentText\n            id=\"scroll-dialog-description\"\n            ref={descriptionElementRef}\n            tabIndex={-1}\n          >\n            <ReactMarkdown>{props.text}</ReactMarkdown>\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={props.handleClose} color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\n","import React, {useEffect, useState} from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ImageIcon from '@material-ui/icons/Image';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Link from '@material-ui/icons/Link';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport FormatAlignJustifyIcon from '@material-ui/icons/FormatAlignJustify';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport ScrollDialog from \"./dialog\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function Search(props){\n  const classes = useStyles();\n\n  const [searchText, setSearchText] = useState(\"\");\n  const [feedbackToken, setFeedbackToken] = useState(\"\");\n  const [apiToken, setApiToken] = useState(\"\");\n  const [serverName, setServerName] = useState(\"\");\n  const [trainingResults, setTrainingResults] = useState([]);\n  const [taskResults, setTaskResults] = useState([]);\n  const [howToResults, setHowToResults] = useState([]);\n  const [dialogText, setDialogText] = useState(\"\");\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [dialogTitle, setDialogTitle] = useState(\"\");\n\n  const handleOnSubmit = (e) => {\n      setSearchText(searchText.trim())\n      e.preventDefault();\n      if(searchText)\n         searchContent();\n  }\n\n  const onServerChange = (e) => {\n      setServerName(e.target.value);\n  }\n\n  const onSearchChange = (e) => {\n      setSearchText(e.target.value)\n  }\n\n  const onApiTokenChange = (e) => {\n      setApiToken(e.target.value);\n  }\n\n  const onFeedbackTokenChange = (e) => {\n      setFeedbackToken(e.target.value);\n  }\n\n  function saveThumb(feedback, search, title, link) {\n    try {\n        fetch(`https://v1.nocodeapi.com/cheezr/google_sheets/ItoBNEeneTgOWxgj/?api_key=${feedbackToken}&tabId=Sheet1`, {\n            method: \"post\",\n\t    body: JSON.stringify([[feedback,search,title,link]]),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        }).then(response => response.json())\n          .then(data => {\n        })\n    } catch (error) {\n        console.error(\"Error:\", error);\n    }\n  }\n\n  const handleClose = () => { \n      setDialogOpen(false);\n  }\n  const ThumbUp = ((props) => {\n      return (\n          <IconButton \n          onClick={() => {\n              saveThumb('up', props.search, props.title, props.url)\n          }}>\n          <ThumbUpIcon/>\n          </IconButton>\n      )\n  });\n\n  const ThumbDown = ((props) => {\n      return (\n          <IconButton\n          onClick={() => {\n               saveThumb('down', props.search, props.title, props.url)\n          }}>\n          <ThumbDownIcon/>\n          </IconButton>\n      )\n  });\n\n  function searchContent() {\n    fetch(\n      `${serverName}/api/v2/kb/?max_items_each=8&search=${searchText}`,\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          \"Authorization\": `Token ${apiToken}`,\n        },\n      }\n    ).then(response => response.json())\n     .then(data => {\n       setTrainingResults(data.results.training);\n       setTaskResults(data.results.tasks);\n       setHowToResults(data.results.howtos);\n    })\n    .catch(function(error) {\n       console.log(error);\n    });\n  }\n    return (\n\t    <div className={classes.root}>\n\t    <ScrollDialog title={dialogTitle} text={dialogText} open={dialogOpen} handleClose={handleClose}/>\n            <Grid container spacing={3}>\n            <Grid item xs={12}>\n                <TextField label={\"https://sde.example.com\"} onChange={onServerChange} value={serverName} />\n                <TextField label={\"Feedback token\"} onChange={onFeedbackTokenChange} value={feedbackToken} />\n                <TextField label={\"API token\"} onChange={onApiTokenChange} value={apiToken} />\n            </Grid>\n\n            <Grid item xs={12}>\n                <form id=\"myform\" onSubmit = {handleOnSubmit} >\n                <TextField\n                 fullWidth\n                 value={searchText}\n                 onChange={onSearchChange}\n                 id=\"input-with-icon-textfield\"\n                 InputProps={{\n                     startAdornment: (\n                         <InputAdornment position=\"start\">\n                             <Button type=\"submit\">\n                             <SearchIcon />\n                             </Button>\n                         </InputAdornment>\n                     ),\n                 }}\n                />\n                </form>\n            </Grid>\n            </Grid>\n                {trainingResults && (\n                <List\n                 subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                    Videos\n                    </ListSubheader>\n                 }\n                 >\n                {trainingResults.map((item) => (\n                  <ListItem>\n                    <ListItemAvatar>\n                        <PlayCircleOutlineIcon />\n                    </ListItemAvatar>\n                    <ListItemText primary={<a href={`${item.url}`}>{item.title}</a>} />\n                    { feedbackToken && (\n                        <>\n                        <ThumbUp search={searchText} title={item.title} url={item.url}/>\n                        <ThumbDown search={searchText} title={item.title} url={item.url}/>\n                        </>\n                    )}\n                  </ListItem>                \n                ))}\n                </List>\n                )}\n                {howToResults && (\n                <List\n                 subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                    How Tos\n                    </ListSubheader>\n                 }\n                 >\n                {howToResults.map((item) => (\n                  <ListItem style={{cursor: 'pointer'}} onClick={() => {setDialogOpen(true); setDialogText(item.text); setDialogTitle(item.title)}}>\n                    <ListItemAvatar>\n                        <FormatAlignJustifyIcon />\n                    </ListItemAvatar>\n                    <ListItemText primary={item.title}/>\n                    { feedbackToken && (\n                        <>\n                        <ThumbUp search={searchText} title={item.title} url={item.url}/>\n                        <ThumbDown search={searchText} title={item.title} url={item.url}/>\n                        </>\n                    )}\n                  </ListItem>\n                ))}\n                </List>\n                )}\n            </div>\n    )\n}\n","import logo from './logo.svg';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\"\nimport Search from \"./screens/Search\";\nimport './App.css';\n\nfunction App() {\n  return (\n     <Router basename={`${process.env.REACT_APP_DEPLOY_CONTEXT}`}>\n\t  <Route path=\"/\" exact component={Search} />\n     </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}